name: Deploy Docker Images

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      server_image_tag:
        default: "latest"
        type: string
      app_image_tag:
        default: "latest"
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Use Computed Server Tag
        run: echo "The computed server tag is ${{ inputs.server_image_tag }}"

      - name: Use Computed Client Tag
        run: echo "The computed client tag is ${{ inputs.app_image_tag }}"

      - name: SSH to VM and Execute Docker-Compose Down
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          script: |
            docker compose -f docker-compose.prod.yml --env-file=.env.prod down --remove-orphans --rmi all

      - name: checkout
        uses: actions/checkout@v3

      - name: Copy Docker Compose File From Repo to VM Host
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          source: "./docker-compose.prod.yml"
          target: /home/${{ vars.VM_USERNAME }}

      - name: SSH to VM and create .env.prod file
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          script: |
            touch .env.prod 
            echo "NODE_ENV=${{ vars.NODE_ENV }}" > .env.prod
            
            echo "MONGODB_USER=${{ vars.MONGODB_USER }}" > .env.prod
            echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env.prod
            echo "MONGODB_DATABASE=${{ vars.MONGODB_DATABASE }}" >> .env.prod
            echo "MONGODB_HOST=${{ vars.MONGODB_HOST }}" >> .env.prod
            echo "MONGODB_PORT=${{ vars.MONGODB_PORT }}" >> .env.prod

            echo "LOG_LEVEL_IN_STRING=${{ vars.LOG_LEVEL_IN_STRING }}" >> .env.prod
            echo "WEBHOOK_PATH=${{ vars.WEBHOOK_PATH }}" >> .env.prod
            echo "APP_ID=${{ vars.APP_ID }}" >> .env.prod
            echo "PRIVATE_KEY=\"${{ secrets.PRIVATE_KEY }}\"" >> .env.prod
            echo "WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}" >> .env.prod
            echo "GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}" >> .env.prod
            echo "GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}" >> .env.prod

            echo "HOST_ALIAS=${{ vars.HOST_ALIAS }}" >> .env.prod
            echo "SERVER_BASE_URL=${{ vars.SERVER_BASE_URL }}" >> .env.prod

            echo "SERVER_IMAGE_TAG=${{ inputs.server_image_tag }}" >> .env.prod
            echo "APP_IMAGE_TAG=${{ inputs.app_image_tag }}" >> .env.prod

      - name: SSH to VM and Execute Docker-Compose Up
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.PROXY_HOST }}
          proxy_username: ${{ vars.PROXY_USERNAME }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.PROXY_PORT }}
          script: |
            docker compose -f docker-compose.prod.yml --env-file=.env.prod up --pull=always -d